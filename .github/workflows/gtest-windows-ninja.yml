# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Run GTest Windows (Ninja)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  windows-gtest-ninja:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 2 configurations:
      # 1. <Windows, Release, latest GCC compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest]
        # build_type: [Release]
        c_compiler: [cl]
        cpp_compiler: [cl]
  
    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/bld" >> "$GITHUB_OUTPUT"

    # - name: Setup Ninja
    #   uses: ashutoshvarma/setup-ninja@master
    #   with:
    #     # ninja version to download. Default: 1.10.0
    #     version: 1.10.0

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DLOG_LEVEL=1
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} && cmake --build ${{ steps.strings.outputs.build-output-dir }} --target Kraken_Test

    - name: Run Tests
      run: .${{ steps.strings.outputs.build-output-dir }}/Kraken_Test

    - name: Zip bin
      if: always()
      run: tar.exe -a -c -f bin.zip bin

    - name: Zip bld
      if: always()
      run: tar.exe -a -c -f ${{ steps.strings.outputs.build-output-dir }}.zip --exclude ${{ steps.strings.outputs.build-output-dir }}/_deps --exclude bld/CMakeFiles bld

    - name: Upload Artifact bin
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: bin
        path: bin.zip
        retention-days: 5

    - name: Upload Artifact bld
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.strings.outputs.build-output-dir }}
        path: ${{ steps.strings.outputs.build-output-dir }}.zip
        retention-days: 5